{:date "2016-03-21"
:tags #{:littleschemer :work :}}

------

* <2016-03-21 Mon 07:36>

*** DONE 9:30am Meeting

*** Begin AXA Unique Prospects Ingestion (*BLOCKED*)
1. Setup table with new prospects
2. Sync up with Evan before beginning development

*** DONE Project Euler Problem 9

*** DONE Finish Chapter 4 Little Schemer

------

Here is the defnition of =

#+BEGIN_SRC scheme
(define =
  (lambda (n m)
    (cond
      ((zero? m) (zero? n))
      ((zero? n) # f)
      (else (= (sub1 n) (sub1 m))))))

;; Rewrite using < and >

(define =
  (lambda (n m)
    (cond
      ((> n m) #f)
      ((< n m) #f)
      (else #t))))

#+END_SRC

------

We have two methods for determining equality.
= for atoms that are numbers and eq? for the others.

------

#+BEGIN_SRC scheme
(define ^
  (lambda (n m)
    (cond
      ((zero? m) 1)
      (else
        (* n (^ n (sub1 m)))))))

;; What is a good name for this function?

(define ???
  (lambda (n m)
    (cond
      ((< n m) 0)
      (else (add1 (??? (- n m) m))))))

#|
division
(??? 3 2)
(add1 (??? 1 2))
(add1 0)
1
|#

(define /
  (lambda (n m)
    (cond
      ((< n m) 0)
      (else (add1 (/ (- n m) m))))))

#+END_SRC

------

What is (/ 15 4)
(add1 (/ 11 4))
(add1 (add1 (/ 7 4)))
(add1 (add1 (add1 (/ 3 4))))
(add1 (add1 (add1 0)))
(add1 (add1 1))
(add1 2)
3

------

#+BEGIN_SRC scheme
(define lat
  (lambda (lat)
    (cond
      ((null? lat) 0)
      (else (add1 (lenth (cdr lat)))))))

(define pick
  (lambda (n lat)
    (cond
      ((zero? (sub1 n)) (car lat))
      (else (pick (sub1 n) (cdr lat))))))

(define rempick
  (lambda (n lat)
    (cond
      ((zero? (sub1 n)) (cdr lat))
      (else (cons (car lat) (rempick (sub1 n) (cdr lat)))))))
#+END_SRC

#+BEGIN_SRC scheme
(define no-nums
  (lambda (lat)
    (cond
      ((null? lat) '())
      (else
        (cond
          ((number? (car lat)) (no-nums (cdr lat)))
          (else (cons (car lat) (no-nums (cdr lat)))))))))

(define all-nums
  (lambda (lat)
    (cond
      ((null? lat) '())
      (else
        ((number? (car lat)) (cons (car lat) (all-nums (cdr lat))))
        (else (all-nums (cdr lat)))))))

(define eqan?
  (lambda (a1 a2)
    (cond
      ((and (number? a1) (number? a2)) (= a1 a2))
      ((or (number? a1) (number? a2)) #f)
      (else (eq? a1 a2)))))

(define occur
  (lambda (a lat)
    (cond
      ((null? lat) 0)
      (else
        (cond
          ((eq? a (car lat)) (add1 (occur a (cdr lat))))
          (else (occur a (cdr lat))))))))

(define one?
  (lambda (n)
    (cond
      ((zero? n) #f)
      (else (zero? (sub1 n))))))

(define one?
  (lambda (n)
    (cond
      (else (= n 1)))))

(define one?
  (lambda (n)
    (= n 1)))

(define rempick
  (lambda (n lat)
    (cond
      ((null? lat) '())
      (else
        (cond
          ((one? n) (cdr lat))
          (else (cons (car lat) (rempick (sub1 n) (cdr lat)))))))))

(define rember*
  (lambda (a l)
    (cond
      ((null? l) '())
      ((atom? (car l))
       (cond
         ((eq? (car l) a) (rember* a (cdr l)))
         (else (cons (car l) (rember* a (cdr l)))))
      (else
        (cons (rember* a (car l))
              (rember* a (cdr l))))))))

(define insertR*
  (lambda (new old l)
    (cond
      ((null? l) '())
      ((atom? (car l))
       (cond
         ((eq? (car l) old)
          (cons old
            (cons new (insertR* new old (cdr l)))))
         (else (cons (car l)
                 (insertR* new old
                   (cdr l))))))
      (else (cons (insertR* new old (car l))
                  (insertR* new old (cdr l)))))))
#+END_SRC
