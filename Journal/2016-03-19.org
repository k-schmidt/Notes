
* <2016-03-19 Sat 13:25>

---
How many S-expressions are in ths list
(((how) are) ((you) (doing so)) far)

Three,
((how) are), ((you) (doing so)), and far
---
---
What is the car of l
where l is ()

No answer.
You cannot ask for the car of the empty list.
---
---
**** The Law of Car
*The primitive /car/ is defined only for non-empty lists.*
---
---
What is the /cdr/ of l where l is (hamburger)

()
---
---
What is (cdr a)
where a is hotdogs

No answer.
You cannot aks for the cdr of an atom.
---
---
What is (cdr l)
where l is ()

No answer.
You cannot ask for the cdr of the null list.
---
---
**** The Law of Cdr
*The primitive /cdr/ is defined only for non-empty lists. The cdr of any non-empty list is always another list.
---
---
What does /cons/ take as its arguments?

/cons/ takes two arguments:
the first one is any S-expression;
the second one is any list.
---
---
**** The Law of Cons
*The primitive /cons/ takes two arguments. The second argument to /cons/ must be a list. The result is a list.*
---
---
Is (null? a) true or false where a is spaghetti?

No answer, because you cannot ask null? of an atom.
---
---
**** The Law of Null?
*The primitive /null?/ is defined only for lists.*
---
---
**** The Law of Eq?
*The primitive /eq?/ takes two arguments. Each must be a non-numeric atom.
---
---
Is (eq? (cdr l) a) true or false
where l is (soured milk)
and a is milk

No answer.
(cdr l) => (milk) which is not an atom.
---
---
#+BEGIN_SRC scheme
(define lat?
  (lambda (l)
    (cond
      ((null? l) #t)
      ((atom? (car l)) (lat? (cdr l)))
      (else #f))))
#+END_SRC
---
---
#+BEGIN_SRC scheme
(define member?
  (lambda (a lat)
    (cond
      ((null? lat) #f)
      (else (or (eq? (car lat) a)
                (member? a (cdr lat)))))))
#+END_SRC
---
*** The First Commandment
*Always ask /null?/ as the first question in expressing any function.*
#+BEGIN_SRC scheme
;; FALSE
(define rember
  (lambda (a lat)
    (cond
      ((null? lat) '())
      (else (cond
        ((eq? (car lat) (cdr lat))
        (else (rember a (cdr lat)))))))))
#+END_SRC
---
*** The Second Commandment
*Use /cons/ to build lists.*
#+BEGIN_SRC scheme
(define rember
  (lambda (a lat)
    (cond
      ((null? lat) '())
      ((eq? (car lat) a) (cdr lat))
      (else (cons (car lat)
                  (rember a (cdr lat)))))))

#+END_SRC
---
*** The Third Commandment
*When building a list, describe the first typical element, and then /cons/ it onto the natural recursion.*
#+BEGIN_SRC scheme
(define firsts
  (lambda (l)
    (cond
      ((null? l) '())
      (else (cons (car (car l))
                  (firsts (cdr l)))))))

(define insertR
  (lambda (new old lat)
    (cond
      ((null? lat) '())
      (else
        (cond
          ((eq? (car lat) old) (cons old (cons new (cdr lat))))
          (else (cons (car lat) (insertR new old (cdr lat)))))))))

(define (insertL new old lat)
    (cond
      ((null? lat) '())
      (else (cond
              ((eq? (car lat) old) (cons new lat))
              (else (cons (car lat) (insertL new old (cdr lat))))))))

(define (subst new old lat)
  (cond
    ((null? lat) '())
    (else (cond
            ((eq? (car lat) old) (cons new (cdr lat)))
            (else (cons (car lat) (subst new old (cdr lat))))))))

(define (subst2 new old1 old2 lat)
  (cond
    ((null? lat) '())
    (else (cond
            ((or (eq? (car lat) old1) (eq? (car lat) old2)) (cons new (cdr lat)))
            (else (cons (car lat) (subst2 new old1 old2 (cdr lat))))))))

(define (multirember a lat)
  (cond
    ((null? lat) '())
    (else (cond
            ((eq? (car lat) a) (multirember a (cdr lat)))
            (else (cons (car lat) (multirember a (cdr lat))))))))

(define (multiinsertR new old lat)
  (cond
    ((null? lat) '())
    (else (cond
            ((eq? (car lat) old) (cons old (cons new (multiinsertR new old (cdr lat)))))
            (else (cons (car lat) (multiinsertR new old (cdr lat))))))))

(define (multiinsertL new old lat)
  (cond
    ((null? lat) '())
    (else (cond
            ((eq? (car lat) old) (cons new (cons (car lat) (multiinsertL new old (cdr lat)))))
            (else (cons (car lat) (multiinsertL new old (cdr lat))))))))
#+END_SRC
*** The Fourth Commandment
*Always change at least one argument while recurring. It must be changed to be closer to termination. The changing argument must be tested in the termination condition: when using /cdr/, test termination with /null?/*
#+BEGIN_SRC scheme
(define multisubst
  (lambda (new old lat)
    (cond
      ((null? lat) '())
      (else (cond
              ((eq? (car lat) old)
               (cons new (multisubst new old (cdr lat))))
              (else (cons (car lat) (multisubst new old (cdr lat)))))))))
#+END_SRC
