#{:date "2016-03-23" :tags #{:littleschemer}}

------

*** TODO Meet with OI to discuss Kepler Standards

*** DONE Finish Chapter 5 Little Schemer

*** TODO Project Euler Problem 11

------

** Little Schemer Chapter 5

#+BEGIN_SRC scheme
(define insertR*
  (lambda (new old l)
    (cond
      ((null? l) '())
      ((atom? (car l))
       (cond
         ((eq? (car l) old)
          (cons old (cons new (insertR* new old (cdr l)))))
         (else (cons (car l) (insertR* new old (cdr l))))))
      (else (cons (insertR* new old (car l))
                  (insertR* new old (cdr l)))))))
#+END_SRC

*** The First Commandment (Final)
*When recurring on a list of atoms, lat, ask two questions about it: (null? lat) and else.*
*When recurring on a number, n, ask two questions about it: (zero? n) and else.*
*When recurring on a list of S-expressions, l, as three questions about it: (null? l), (atom? (car l)), and else.*

How are all * functions similar?

They all aks three questions and recur with the /car/ as well as with the /cdr/, whenever the /car/ is a list.

Why?

Because all * functions work on lists that are either:
1. empty
2. an atom consed onto a list
3. a list consed onto a list

*** The Fourth Commandment (Final)
*Always change at least one argument while recurring.*
*When recurring on a list of atoms, lat, use (cdr lat).*
*When recurring on a number, n, use (sub1 n).*
*When recurring on a list of S-expressions, l, use (car l) and (cdr l) if neither (null? l) nor (atom? (car l)) are true.*

*It must be changed to be closer to termination. The changing argument must be tested in the termination condition:*
*When using cdr, test termination with null? and when using sub1, test termination with zero?*

#+BEGIN_SRC scheme
(define occur*
  (lambda (a l)
    (cond
      ((null? l) 0)
      ((atom? (car l))
       (cond (eq? a (car l))
              (add1 (occur* (cdr l)))
             (else
              (occur* a (cdr l)))))
      (else (+ (occur* a (car l))
               (occur* a (cdr l)))))))

(define subst*
  (lambda (new old l)
    (cond
      ((null? l) '())
      ((atom? (car l))
       (cond
         ((eq? (car l) old)
          (cons new (subst* new old (cdr l))))
         (else
          (cons (car l) (subst* new old (cdr l))))))
      (else
        (cons (subst* new old (car l))
              (subst* new old (cdr l)))))))

(define insertL*
  (lambda (new old l)
    (cond
      ((null? l) '())
      ((atom? (car l))
        (cond
          ((eq? (car l) old)
           (cons new
            (cons old (insertL* new old (cdr l)))))
          (else
           (cons (car l) (insertL* new old (cdr l))))))
      (else
       (cons (insertL* new old (car l))
             (insertL* new old (cdr l)))))))

(define member*
  (lambda (a l)
    (cond
      ((null? l) '())
      ((atom? (car l))
        (or (eq? (car l) a) 
            (member* a (cdr l))))
      (else (or (member* a (car l))
                (member* a (cdr l)))))))

(define leftmost
  (lambda (l)
    (cond
      ((atom? (car l)) (car l))
      (else (leftmost (car l))))))

(define eqlist?
  (lambda (l1 l2)
    (cond
      ((and (null? l1) (null? l2)) #t)
      ((or (null? l1) (null? l2)) #f)
      ((and (atom? (car l1)) (atom? (car l2)))
       (and (eqan? (car l1) (car l2))
         (eqlist? (cdr l1) (cdr l2))))
      ((or (atom? (car l1)) (atom? (car l2))) #f)
      (else
        (and (eqlist? (car l1) (car l2))
             (eqlist? (cdr l1) (cdr l2)))))))
#+END_SRC

*** The Sixth Commandment
*Simplify only after the function is correct.*

#+BEGIN_SRC scheme
(define rember
  (lambda (s l)
    (cond
      ((null? l) '())
      ((atom? (car l))
       (cond
         ((equal? (car l) s) (cdr l))
         (else (cons (car l)
                 (rember s (cdr l))))))
      (else (cond
              ((equal? (car l) s) (cdr l))
              (else (cons (car l)
                          (rember s (cdr l)))))))))

(define rember
  (lambda (s l)
    (cond
      ((null? l) '())
      (else (cond
              ((equal? (car l) s) (cdr l))
              (else (cons (car l) (rember s (cdr l)))))))))

(define rember
  (lambda (s l)
    (cond
      ((null? l) '())
      ((equal? (car l) s) (cdr l))
      (else (cons (car l) (rember s (cdr l)))))))

#+END_SRC
